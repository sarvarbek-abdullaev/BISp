// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ProductVariant {
  DEFAULT
  SMALL
  MEDIUM
  LARGE
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentType {
  PRODUCT
  STUDY
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  name       String?
  birthYear  Int?
  password   String?
  status     Status      @default(ACTIVE)
  role       Role        @default(STUDENT)
  // 
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // 
  userGroups UserGroup[]
  // 
  orders     Order[]
}

model Group {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  year       Int?
  // 
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // 
  userGroups UserGroup[]
  // 
  course     Course?     @relation(fields: [courseId], references: [id])
  courseId   String?     @db.ObjectId

  @@unique([name, year, courseId])
}

model UserGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("_user_id") @db.ObjectId
  // 
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @map("_group_id") @db.ObjectId

  @@unique([userId, groupId])
}

model Module {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  name        String
  description String?
  // 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // 
  courseId    String?  @db.ObjectId
  course      Course?  @relation(fields: [courseId], references: [id])
  // 
  events      Event[]
  lessons     Lesson[]

  @@unique([code, courseId])
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  name        String
  description String?
  // 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // 
  modules     Module[]
  // 
  groups      Group[]
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  //
  startDate   DateTime
  endDate     DateTime
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  moduleId    String   @db.ObjectId
  module      Module   @relation(fields: [moduleId], references: [id])
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  moduleId    String?  @db.ObjectId
  module      Module?  @relation(fields: [moduleId], references: [id])
}

model Product {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Float
  variants      ProductVariant[]
  status        Status           @default(ACTIVE)
  image         String?
  //
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  //
  orderProducts OrderProduct[]
}

model OrderProduct {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  selectedVariant ProductVariant
  //
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  //
  order           Order          @relation(fields: [orderId], references: [id])
  orderId         String         @map("_order_id") @db.ObjectId
  //
  product         Product        @relation(fields: [productId], references: [id])
  productId       String         @map("_product_id") @db.ObjectId
}

model Order {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @map("_user_id") @db.ObjectId
  //
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  //
  payments      Payment[]
  // 
  orderProducts OrderProduct[]
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  status    PaymentStatus @default(PENDING)
  type      PaymentType
  //
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  //
  order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?       @db.ObjectId
}
