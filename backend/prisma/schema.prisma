// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ProductVariant {
  DEFAULT
  SMALL
  MEDIUM
  LARGE
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentType {
  PRODUCT
  STUDY
}

enum Level {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}

enum EnrollmentStatus {
  PENDING
  CANCELED
  APPROVED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum Semester {
  SEMESTER_1
  SEMESTER_2
}

model AcademicYear {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  year              Int                @unique
  startDate         DateTime?
  endDate           DateTime?
  //
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  registeredModules RegisteredModule[]
  groups            Group[]
}

model Profile {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  email                String                @unique
  birthDate            DateTime              @db.Date
  status               Status                @default(ACTIVE)
  password             String?
  role                 Role                  @default(STUDENT)
  //
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  //
  orders               Order[]
  profileModules       ProfileModule[]
  students             Student[]
  teachers             Teacher[]
  admins               Admin[]
  registeredModules    RegisteredModule[]
  modulesRegistrations ModulesRegistration[]
  payments             Payment[]
}

model Student {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  level         Level          @default(LEVEL_1)
  //
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  //
  profileId     String         @db.ObjectId
  profile       Profile        @relation(fields: [profileId], references: [id])
  //
  courseId      String?        @db.ObjectId
  course        Course?        @relation(fields: [courseId], references: [id])
  //
  studentGroups StudentGroup[]
  enrollments   Enrollment[]
  marks         Mark[]
  attendances   Attendance[]
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
  //
  modules   Module[]
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model Group {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  semester       Semester
  name           String
  level          Level          @default(LEVEL_1)
  status         Status         @default(ACTIVE)
  //
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  // 
  course         Course         @relation(fields: [courseId], references: [id])
  courseId       String         @db.ObjectId
  //
  academicYear   AcademicYear   @relation(fields: [academicYearId], references: [id])
  academicYearId String         @db.ObjectId
  //
  studentGroups  StudentGroup[]
  lessons        Lesson[]

  @@unique([name, courseId, academicYearId, semester])
}

model StudentGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  //
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId

  //
  @@unique([studentId, groupId])
}

model Module {
  id                          String                       @id @default(auto()) @map("_id") @db.ObjectId
  code                        String                       @unique
  name                        String
  status                      Status                       @default(ACTIVE)
  description                 String?
  //
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  //
  level                       Level                        @default(LEVEL_1)
  //
  courseId                    String?                      @db.ObjectId
  course                      Course?                      @relation(fields: [courseId], references: [id])
  //
  teacherId                   String?                      @db.ObjectId
  teacher                     Teacher?                     @relation(fields: [teacherId], references: [id])
  //
  events                      Event[]
  lessons                     Lesson[]
  exams                       Exam[]
  profileModules              ProfileModule[]
  classes                     Class[]
  registeredModules           RegisteredModule[]
  moduleToModuleRegistrations ModuleToModuleRegistration[]
  attendanceClasses           AttendanceClass[]

  @@unique([code, courseId])
}

model ModulesRegistration {
  id                          String                       @id @default(auto()) @map("_id") @db.ObjectId
  status                      EnrollmentStatus             @default(PENDING)
  // 
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  //
  profileId                   String                       @db.ObjectId
  profile                     Profile                      @relation(fields: [profileId], references: [id])
  // 
  moduleToModuleRegistrations ModuleToModuleRegistration[]
}

model ModuleToModuleRegistration {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  //
  module                Module              @relation(fields: [moduleId], references: [id])
  moduleId              String              @db.ObjectId
  //
  modulesRegistration   ModulesRegistration @relation(fields: [modulesRegistrationId], references: [id])
  modulesRegistrationId String              @db.ObjectId
}

model RegisteredModule {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //
  profile        Profile      @relation(fields: [profileId], references: [id])
  profileId      String       @db.ObjectId
  //
  module         Module       @relation(fields: [moduleId], references: [id])
  moduleId       String       @db.ObjectId
  //
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId String       @db.ObjectId
}

model ProfileModule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @db.ObjectId
  //
  module    Module   @relation(fields: [moduleId], references: [id])
  moduleId  String   @db.ObjectId

  @@unique([profileId, moduleId, year])
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  marks     Mark[]
  //
  moduleId  String?  @db.ObjectId
  module    Module?  @relation(fields: [moduleId], references: [id])
}

model Mark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mark      Float
  //
  exam      Exam     @relation(fields: [examId], references: [id])
  examId    String   @db.ObjectId
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @db.ObjectId
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  code        String       @unique
  name        String
  status      Status       @default(ACTIVE)
  description String?
  //
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  //
  modules     Module[]
  groups      Group[]
  students    Student[]
  enrollments Enrollment[]
}

model Enrollment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  status    EnrollmentStatus @default(PENDING)
  // 
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  //
  courseId  String           @db.ObjectId
  course    Course           @relation(fields: [courseId], references: [id])
  //
  studentId String           @db.ObjectId
  student   Student          @relation(fields: [studentId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  //
  startDate   DateTime
  endDate     DateTime
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  moduleId    String?  @db.ObjectId
  module      Module?  @relation(fields: [moduleId], references: [id])
}

model Product {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float
  variants        ProductVariant[] @default([DEFAULT])
  status          Status           @default(ACTIVE)
  image           String?
  //
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  //
  orderedProducts OrderedProduct[]
}

model OrderedProduct {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  quantity     Int
  selectedSize ProductVariant @default(DEFAULT)
  //
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  //
  productId    String         @db.ObjectId
  product      Product        @relation(fields: [productId], references: [id])
  // 
  order        Order?         @relation(fields: [orderId], references: [id])
  orderId      String?        @db.ObjectId
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  status          OrderStatus      @default(PENDING)
  //
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  //
  profileId       String           @db.ObjectId
  profile         Profile          @relation(fields: [profileId], references: [id])
  //
  orderedProducts OrderedProduct[]
  payments        Payment[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startTime Int
  endTime   Int
  day       Int
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  groupId   String?  @db.ObjectId
  group     Group?   @relation(fields: [groupId], references: [id])
  //
  moduleId  String?  @db.ObjectId
  module    Module?  @relation(fields: [moduleId], references: [id])

  @@unique([startTime, endTime, day, moduleId])
}

model Class {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  moduleId  String?  @db.ObjectId
  module    Module?  @relation(fields: [moduleId], references: [id])
}

model Attendance {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  status            AttendanceStatus @default(PRESENT)
  //
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  //
  studentId         String           @db.ObjectId
  student           Student          @relation(fields: [studentId], references: [id])
  //
  attendanceClass   AttendanceClass  @relation(fields: [attendanceClassId], references: [id])
  attendanceClassId String           @db.ObjectId
}

model AttendanceClass {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  //
  module      Module       @relation(fields: [moduleId], references: [id])
  moduleId    String       @db.ObjectId
  //
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  //
  attendances Attendance[]
}

model Payment {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  type      PaymentType
  //
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  //
  profileId String      @db.ObjectId
  profile   Profile     @relation(fields: [profileId], references: [id])
  //
  orderId   String?     @db.ObjectId
  order     Order?      @relation(fields: [orderId], references: [id])
}
