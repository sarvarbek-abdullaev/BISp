// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum ProductVariant {
  DEFAULT
  SMALL
  MEDIUM
  LARGE
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentType {
  PRODUCT
  STUDY
}

enum Level {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}

model Profile {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String    @unique
  birthDate DateTime  @db.Date
  status    Status    @default(ACTIVE)
  password  String?
  role      Role      @default(STUDENT)
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  //
  orders    Order[]
  students  Student[]
  teachers  Teacher[]
  admins    Admin[]
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  level     Level    @default(LEVEL_1)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])

  studentGroups StudentGroup[]
  //
  courseId      String?        @db.ObjectId
  course        Course?        @relation(fields: [courseId], references: [id])
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  profileId String   @db.ObjectId
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model Group {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  year          Int?
  // 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // 
  studentGroups StudentGroup[]
  // 
  course        Course?        @relation(fields: [courseId], references: [id])
  courseId      String?        @db.ObjectId

  @@unique([name, year, courseId])
}

model StudentGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String   @db.ObjectId
  //
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @map("_group_id") @db.ObjectId

  //
  @@unique([studentId, groupId])
}

model Module {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  name        String
  description String?
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  level       Level    @default(LEVEL_1)
  //
  courseId    String?  @db.ObjectId
  course      Course?  @relation(fields: [courseId], references: [id])
  //
  events      Event[]
  lessons     Lesson[]

  @@unique([code, courseId])
}

model Course {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  name        String
  description String?
  //
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //
  modules     Module[]
  groups      Group[]
  students    Student[]
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  //
  startDate   DateTime
  endDate     DateTime
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  moduleId    String   @db.ObjectId
  module      Module   @relation(fields: [moduleId], references: [id])
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  //
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  //
  moduleId    String?  @db.ObjectId
  module      Module?  @relation(fields: [moduleId], references: [id])
}

model Product {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float
  variants        ProductVariant[]
  status          Status           @default(ACTIVE)
  image           String?
  //
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  //
  orderedProducts OrderedProduct[]
}

model OrderedProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  //
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  //
  profileId String    @db.ObjectId
  profile   Profile   @relation(fields: [profileId], references: [id])
  // 
  payments  Payment[]
  //
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  status    PaymentStatus @default(PENDING)
  type      PaymentType
  //
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  //
  order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?       @db.ObjectId
}
